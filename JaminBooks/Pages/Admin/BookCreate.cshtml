@page
@model JaminBooks.Pages.Admin.BookCreateModel
@{
    ViewData["Title"] = "Create Book";
    var BookImage = "";

    @if (Model.Book != null)
    {
        BookImage = Model.Book.LoadImage;
    }

}

<style>
    .hidden {
        display: none;
    }

    .unhidden {
        display: block;
    }
</style>


<!--The book page layout-->
<!--Hide the book id but still keep it available-->
<input id="BookID" type="hidden" name="BookID" value="@(Model.Book == null ? -1 : Model.Book.BookID)" />
<div class="container body-content">
    <div class="row">
        <div class="col-10 offset-1">
            <div class="row">
                <div class="col-12">
                    <h2 class="text-center">Create a Book</h2>
                </div>
            </div>
            <div class="row mb-3 mt-3">
                <div class="col-3">
                    <div class="icon-div">
                        <img id="Image" height="100" width="71" src="@(Model.Book != null ? BookImage : "/images/missing.png")" />
                    </div>
                </div>
                <div class="col-9 pt-3">
                    <div class="custom-file">
                        <div class="input-group mb-3">
                            <input type="file" class="custom-file-input" id="customFile">
                            <label class="custom-file-label" for="customFile">
                                Choose file...
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <!--general book information entry-->
            <div class="row">
                <div class="col-12">
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Title</label>
                        <div class="col-9">
                            <input id="Title" type="text" maxlength=100 class="form-control" placeholder="Title" required maxlength="100" name="Title" value="@(Model.Book == null ? "" : Model.Book.Title )" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Publication Date</label>
                        <div class="col-9">
                            <input id="PublicationDate" type="date" class="form-control" required name="PublicationDate" value="@(Model.Book == null ? "" : Model.Book.PublicationDate.ToString("yyyy-MM-dd") )" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Copyright Date</label>
                        <div class="col-9">
                            <input id="CopyrightDate" type="date" class="form-control" required name="CopyrightDate" value="@(Model.Book == null ? "" : Model.Book.CopyrightDate.ToString("yyyy-MM-dd") )" />
                        </div>
                    </div>

                    <!--Author sub entry-->
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Author</label>
                        <div class="col-5">
                            <select id="Authorlist" class="form-control" multiple>
                                @foreach (Model.Author a in Model.Authors)
                                {
                                    @Html.Raw("<option " + (Model.Book != null && Model.Book.Authors.Any(a2 => a2.AuthorID == a.AuthorID) ? "selected='selected'" : "") + " value='" + a.AuthorID + "'>" + a.FullName + "</option>");
                                }
                            </select>
                        </div>
                        <div class="col-4">
                            <input id="SaveAuthor" type="button" onclick="unhide(this, 'author'); " value="Add New" class="btn btn-block btn-dark">
                        </div>
                    </div>
                    <div id="author" class="hidden">
                        <div class="form-group row offset-1">
                            <label class="col-3 col-form-label">First Name</label>
                            <div class="col-9">
                                <input id="AFirstName" maxlength=50 type="text" class="form-control" placeholder="Author First Name" required name="FName" />
                            </div>
                        </div>
                        <div class="form-group row offset-1">
                            <label class="col-3 col-form-label">Last Name</label>
                            <div class="col-9">
                                <input id="ALastName" maxlength=50 type="text" class="form-control" placeholder="Author Last Name" required name="LName" />
                            </div>
                        </div>
                        <div class="form-group row offset-1">
                            <label class="col-3 col-form-label"></label>
                            <div class="col-9">
                                <button id="CreateAuthor" class="btn btn-block btn-red">Save New Author</button>
                            </div>
                        </div>
                    </div>


                    <!--End Author sub entry-->
                    <!--Category sub Entry-->

                    <div class="form-group row">
                        <label class="col-3 col-form-label">Category</label>
                        <div class="col-5">
                            <select id="BookCat" class="form-control" multiple>
                                @foreach (Model.Category c in Model.Categories)
                                {
                                    @Html.Raw("<option " + (Model.Book != null && Model.Book.Categories.Any(c2 => c2.CategoryID == c.CategoryID) ? "selected='selected'" : "") + " value='" + c.CategoryID + "'>" + c.CategoryName + "</option>");
                                }
                            </select>
                        </div>
                        <div class="col-4">
                            <input id="SaveCategory" type="button" onclick="unhide(this, 'category'); " value="Add New" class="btn btn-block btn-dark">
                        </div>
                    </div>

                    <div id="category" class="hidden">
                        <div class="form-group row offset-1">
                            <label class="col-3 col-form-label">Category Name</label>
                            <div class="col-9">
                                <input id="CategoryName" maxlength=50 type="text" class="form-control" placeholder="Category" required name="category" />
                            </div>
                        </div>

                        <div class="form-group row offset-1">
                            <label class="col-3 col-form-label"></label>
                            <div class="col-9">
                                <button id="CreateCategory" class="btn btn-block btn-red">Save New Category</button>
                            </div>
                        </div>
                    </div>

                    <!--End Category Sub Entry-->
                    <!--Publisher sub entry-->
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Publisher</label>
                        <div class="col-5">
                            <select id="Publist" class="form-control">
                                <option>Select Publisher...</option>
                                @foreach (Model.Publisher p in Model.Publishers)
                                {
                                    @Html.Raw("<option " + (Model.Book != null && Model.Book.Publisher.PublisherID == p.PublisherID ? "selected='selected'" : "") + " value='" + p.PublisherID + "'>" + p.PublisherName + "</option>");
                                }

                            </select>
                        </div>
                    </div>



                    <!--final general entries-->
                    <div class="form-group row">
                        <label class="col-3 col-form-label">ISBN10</label>
                        <div class="col-9">
                            <input id="isbn10" type="text" class="form-control" maxlength=10 placeholder="ISBN10" required name="ISBN10" value="@(Model.Book == null ? "" : Model.Book.ISBN10)" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-3 col-form-label">ISBN13</label>
                        <div class="col-9">
                            <input id="isbn13" type="text" class="form-control" maxlength=13 placeholder="ISBN13" required name="ISBN13" value="@(Model.Book == null ? "" : Model.Book.ISBN13 )" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Customer Price</label>
                        <div class="input-group col-9">
                            <div class="input-group-prepend">
                                <div class="input-group-text">$</div>
                            </div>
                            <input id="Price" type="number" class="form-control" step="0.1" required name="Price" value="@(Model.Book == null ? "0.00" : Model.Book.Price.ToString("0.00"))" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Cost</label>
                        <div class="input-group col-9">
                            <div class="input-group-prepend">
                                <div class="input-group-text">$</div>
                            </div>
                            <input id="Cost" type="number" class="form-control" step="0.1" required name="Cost" value="@(Model.Book == null ? "0.00" : Model.Book.Cost.ToString("0.00"))" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Quantity</label>
                        <div class="col-9">
                            <input id="Quantity" type="number" class="form-control" required name="Quantity" value="@(Model.Book == null ? 0 : Model.Book.Quantity)" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-3 col-form-label">Description</label>
                        <div class="col-9">
                            <textarea id="Description" class="form-control" placeholder="Enter the Description" required name="Description">@(Model.Book == null ? "" : Model.Book.Description)</textarea>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-3 col-form-label"></label>
                        <div class="col-9">
                            <button id="SaveBook" class="btn btn-block btn-dark">Save Book</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ConfirmNoQuantity" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <label>Confirm</label>
            </div>
            <div class="modal-body">
                <label>Are you sure you want to create a Book with 0 Quantity?</label>
            </div>
            <div class="modal-footer">
                <button type="button" id="Cancel0Q" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <a id="Confirm0Q" class="btn btn-danger btn-ok">Yes</a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ConfirmNoDescription" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <label>Confirm</label>
            </div>
            <div class="modal-body">
                <label>Are you sure you want to create a Book with no Description?</label>
            </div>
            <div class="modal-footer">
                <button type="button" id="CancelNoD" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <a id="ConfirmNoD" class="btn btn-danger btn-ok">Yes</a>
            </div>
        </div>
    </div>
</div>

<!--Script for the buttons-->
<script>

    $(document).ready(function () {

        $("#isbn10, #isbn13, #Quantity").bind("input keyup paste", function () {
            this.value = this.value.replace(/\D/g, '');
        });

        $("#Price, #Cost").bind("input keyup paste", function () {
            this.value = this.value.replace(/[^0-9,.]/g, '');
        });

        $('#customFile').change(function () {
            var filename = $(this).val().split('\\').pop();
            $(".custom-file-label").html(filename);
        });

        $("#customFile").change(function () {
            var canvas = document.createElement("canvas");

            var reader = new FileReader();
            reader.onload = function (event) {
                var img = new Image();
                img.onload = function () {
                    canvas.width = 251;
                    canvas.height = 400;
                    canvas.getContext('2d').drawImage(img, 0, 0, canvas.width, canvas.height);

                    $("#Image").get(0).src = canvas.toDataURL('image/png');
                }
                img.src = reader.result;
            }
            reader.readAsDataURL($("#customFile").get(0).files[0]);
        });

        //save the book
        $("#SaveBook").click(function () {
            if (validate()) {

                var canvas = document.createElement("canvas");

                var reader = new FileReader();
                reader.onload = function (event) {
                    var img = new Image();
                    img.onload = function () {
                        canvas.width = 251;
                        canvas.height = 400;
                        canvas.getContext('2d').drawImage(img, 0, 0, canvas.width, canvas.height);

                        var data = {
                            BookID: $("#BookID").val(),
                            Image: canvas.toDataURL('image/png').replace(/^data:image\/(png|jpeg);base64,/, ''),
                            Title: $("#Title").val(),
                            PublicationDate: $("#PublicationDate").val(),
                            CopyrightDate: $("#CopyrightDate").val(),
                            Authorlist: JSON.stringify($("#Authorlist").val()),
                            BookCat: JSON.stringify($("#BookCat").val()),
                            Publisher: $("#Publist").val(),
                            ISBN10: $("#isbn10").val(),
                            ISBN13: $("#isbn13").val(),
                            Price: $("#Price").val(),
                            Cost: $("#Cost").val(),
                            Quantity: $("#Quantity").val(),
                            Description: $("#Description").val()
                        }
                        //When done creating the book change to the page of the book
                        $.ajax({
                            type: "POST",
                            url: "/Model/SaveBook",
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("XSRF-TOKEN",
                                    $('input:hidden[name="__RequestVerificationToken"]').val());
                            },
                            data: JSON.stringify(data),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (response) {
                                location.href = '/Book?id=' + response;
                            },
                            failure: function (response) {
                                location.href = "\Error";
                            }
                        });
                    }
                    img.src = reader.result;
                }
                reader.readAsDataURL($("#customFile").get(0).files[0]);
            }
        });
        //create author button click
        $("#CreateAuthor").click(function () {
            if (validateAuthor()) {

                var data = {
                    AFirstName: $("#AFirstName").val(),
                    ALastName: $("#ALastName").val()
                }

                var option = $("option:contains('" + $("#AFirstName").val() + " " + $("#ALastName").val() + "')");
                if (option.length > 0) {
                    option.attr("selected", "selected");
                    unhide(SaveAuthor, 'author');
                    $("#AFirstName").val("");
                    $("#ALastName").val("");
                } else {
                    $.ajax({
                        type: "POST",
                        url: "/Model/CreateAuthor/",
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader("XSRF-TOKEN",
                                $('input:hidden[name="__RequestVerificationToken"]').val());
                        },
                        data: JSON.stringify(data),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            unhide(SaveAuthor, 'author');
                            $("<option selected='selected' value='" + response[0] + "'>" + response[1] + "</option>").appendTo("#Authorlist");
                            $("#AFirstName").val("");
                            $("#ALastName").val("");
                        },
                        failure: function (response) {
                            location.href = "\Error";
                        }
                    });
                }
            }
        });

        $("#CreateCategory").click(function () {
            if (validateCategory()) {

                var data = {
                    CategoryName: $("#CategoryName").val()
                }

                var option = $("option:contains('" + $("#CategoryName").val() + "')");
                if (option.length > 0) {
                    option.attr("selected", "selected");
                    unhide(SaveCategory, 'category');
                    $("#CategoryName").val("");
                } else {
                    $.ajax({
                        type: "POST",
                        url: "/Model/CreateCategory/",
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader("XSRF-TOKEN",
                                $('input:hidden[name="__RequestVerificationToken"]').val());
                        },
                        data: JSON.stringify(data),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (response) {
                            unhide(SaveCategory, 'category');
                            $("<option selected='selected' value='" + response[0] + "'>" + response[1] + "</option>").appendTo("#BookCat");
                            $("#CategoryName").val("");
                        },
                        failure: function (response) {
                            location.href = "\Error";
                        }
                    });
                }
            }
        });
    });


    //validation for adding category
    function validateCategory() {
        var valid = true;
        $("#CategoryName").removeAttr("style");

        if ($("#CategoryName").val() == "") {
            $("#CategoryName").css("border-color", "red");
            valid = false;
        }
        if (["#CatgoryName"].indexOf(BookCat) >= 0) {
            valid = false;
        }
        return valid;

    }

    //validation for adding Author
    function validateAuthor() {
        var valid = true;
        $("#AFirstName").removeAttr("style");
        $("#ALastName").removeAttr("style");



        if ($("#AFirstName").val() == "") {
            $("#AFirstName").css("border-color", "red");
            valid = false;
        }
        if ($("#ALastName").val() == "") {
            $("#ALastName").css("border-color", "red");
            valid = false;
        }

        return valid;

    }

    //validation for creating a book without custom categories or author
    function validate() {
        var valid = true;
        $("#Title").removeAttr("style");
        $("#PublicationDate").removeAttr("style");
        $("#CopyrightDate").removeAttr("style");
        $("#Authorlist").removeAttr("style");
        $("#BookCat").removeAttr("style");
        $("#Publist").removeAttr("style");
        $("#isbn10").removeAttr("style");
        $("#isbn13").removeAttr("style");
        $("#Cost").removeAttr("style");
        $("#Price").removeAttr("style");
        $("#Description").removeAttr("style");

        if ($("#customFile").get(0).files.length == 0) {
            $("#customFile").css("border-color", "red");
            valid = false;
        }
        if ($("#Title").val() == "") {
            $("#Title").css("border-color", "red");
            valid = false;
        }
        if ($("#PublicationDate").val() == "") {
            $("#PublicationDate").css("border-color", "red");
            valid = false;
        }
        if ($("#CopyrightDate").val() == "") {
            $("#CopyrightDate").css("border-color", "red");
            valid = false;
        }
        if ($("#Authorlist").val() == null) {
            $("#Authorlist").css("border-color", "red");
            valid = false;
        }
        if ($("#BookCat").val() == null) {
            $("#BookCat").css("border-color", "red");
            valid = false;
        }
        if ($("#Publist").val() == "Select Publisher...") {
            $("#Publist").css("border-color", "red");
            valid = false;
        }
        if ($("#isbn10").val() == "") {
            $("#isbn10").css("border-color", "red");
            valid = false;
        }
        if ($("#isbn13").val() == "") {
            $("#isbn13").css("border-color", "red");
            valid = false;
        }
        if ($("#Price").val() == "0.00") {
            $("#Price").css("border-color", "red");
            valid = false;
        }
        if ($("#Cost").val() == "0.00") {
            $("#Cost").css("border-color", "red");
            valid = false;
        }
        return valid;
    }
</script>

<script type="text/javascript">
    function unhide(clickedButton, divID) {
        var item = document.getElementById(divID);
        if (item) {
            if (item.className == 'hidden') {
                item.className = 'unhidden';
                clickedButton.value = 'Cancel'
            } else {
                item.className = 'hidden';
                clickedButton.value = 'Add New'
            }
        }
    }





</script>


